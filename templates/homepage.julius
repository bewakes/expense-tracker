const ticks = new Array(30).map((x, i) => ([i+1, i+1]));
const pieOptions = {
    series:
    {
        pie: {
            show: true,
            innerRadius: 0.5,
            label: {
                show: true
            },
            legend: {
                show: true
            }
        },
    },
    grid: {
        hoverable: true,
        clickable: true,
    }
};

const newBarOptions = () => ({
    series: {
        bars: {
            show: true
        }
    },
    bars: {
        align: "center",
        barWidth: 0.2
    },
    xaxis: {
        axisLabelFontSizePixels: 3,
        axisLabel: "Days",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 8,
        axisLabelFontFamily: 'Verdana, Arial',
        axisLabelPadding: 12,
    },
    yaxis: {
        axisLabelFontSizePixels: 2,
        axisLabel: "Amount (NRs.)",
    },
    grid: {
        hoverable: true,
        clickable: true,
        borderWidth: 2,
    }
});

var month = null;

var COLORS = [
    '#003f5c',
    '#2f4b7c',
    '#665191',
    '#a05195',
    '#d45087',
    '#f95d6a',
    '#ff7c43',
    '#ffa600',
];

$.getJSON("/expenses/summary"+location.search, function(respJSON) {
    const monthData = respJSON.month_data;
    month = respJSON.month;
    const categoryData = respJSON.category_data.map(([a, b], i) => ({label: a, data: b}));
    const categories = respJSON.category_data.map(x => x[0]);
    const categoryBar = respJSON.category_data.map((x, i) => ([i, x[1]]));
    const dataObj = monthData.reduce((a, x) => ({...a, [parseInt(x[0])]: x[1]}), {});
    const data = [];
    for(let i=1; i<=32; i++) {
        data.push([i, dataObj[i] || 0]);
    }
    const dataset = [
        {
            label: "Daily Expense",
            data: data,
            color: "#5482FF"
        }
    ];
    $.plot($("#bar-graph-container"), dataset, newBarOptions());
    const catOptions = newBarOptions();
    catOptions.xaxis = {
        ...catOptions.xaxis,
        axisLabel: "Categories",
        show: true,
        ticks: categories.map((x, i) => ([i, x])),
    };
    $.plot($("#cat-bar-graph-container"), [categoryBar], catOptions);
    $.plot($("#pie-chart-container"), categoryData, pieOptions);
    const barTTFn = (item) => {
        var x = item.datapoint[0];
        var y = item.datapoint[1];
        return month + " " + x + "<br/>" + "<strong>NRs. " + y + "</strong>";
    };
    $("#bar-graph-container").UseTooltip(barTTFn);
    const catBarTTFn = (item) => {
        var x = item.datapoint[0];
        var y = item.datapoint[1];
        return categories[x] + "<br />" + "<strong>NRs. " + y + "</strong>";
    }
    $("#cat-bar-graph-container").UseTooltip(catBarTTFn);
});

var previousPoint = null;
$.fn.UseTooltip = function (tooltipFn) {
    if (!tooltipFn) {
        tooltipFn = (item) => "<br/>" + item.datapoint[1];
    }
    $(this).bind("plothover", function (event, pos, item) {
        if (item) {
            if (previousPoint != item.dataIndex) {
                previousPoint = item.dataIndex;
                $("#tooltip").remove();
                showTooltip(item.pageX, item.pageY, tooltipFn(item));
            }
        }
        else {
            $("#tooltip").remove();
            previousPoint = null;
        }
    });
};

function showTooltip(x, y, contents) {
    $('<div id="tooltip">' + contents + '</div>').css({
        position: 'absolute',
        display: 'none',
        top: y + 5,
        left: x + 20,
        border: '2px solid #4572A7',
        padding: '2px',
        size: '10',
        'border-radius': '6px 6px 6px 6px',
        'background-color': '#fff',
        opacity: 0.80
    }).appendTo("body").fadeIn(200);
}

function onChangeGroupSelect(elem) {
    let params = (new URL(document.location)).searchParams;
    let newParams = {
        month: params.get('month'),
        year: params.get('year'),
        group: elem.value
    };
    var query = $.param(newParams);
    window.location = location.pathname + "?" +query;
}
